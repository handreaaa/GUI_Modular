import tkinter as tk
from tkinter import ttk, scrolledtext
import serial
import threading
import time
import csv

class SerialApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Serial Communication")

        # Configura la conexión serial
        self.ser = serial.Serial('COM3', 9600, timeout=1)
        self.running = False
        self.data = []  # Almacena los datos recibidos

        # Crea los widgets de la GUI
        self.create_widgets()

    def create_widgets(self):
        # Inicia la comunicación
        self.start_button = ttk.Button(self.master, text="Start", command=self.start_serial)
        self.start_button.pack(pady=10)

        # Detiene la comunicación
        self.stop_button = ttk.Button(self.master, text="Stop", command=self.stop_serial, state='disabled')
        self.stop_button.pack(pady=10)

        # Guarda en CSV
        self.save_button = ttk.Button(self.master, text="Save as CSV", command=self.save_to_csv, state='disabled')
        self.save_button.pack(pady=10)

        # Muestra los datos recibidos
        self.data_text = scrolledtext.ScrolledText(self.master, width=40, height=10)
        self.data_text.pack(pady=10)

    def start_serial(self):
        self.running = True
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.save_button.config(state='disabled')
        threading.Thread(target=self.receive_data).start()

    def stop_serial(self):
        self.running = False
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        if len(self.data) >= 7:  # Asegura que hay suficientes datos para guardar
            self.save_button.config(state='normal')

    def receive_data(self):
        while self.running:
            if self.ser.in_waiting > 0:
                data_line = self.ser.readline().decode().strip()
                self.data_text.insert(tk.END, data_line + "\n")
                self.data_text.yview(tk.END)
                self.data.append(data_line.split(','))  # Asume que los datos recibidos están separados por comas
            time.sleep(0.1)
            if len(self.data) >= 7:  # Limita la captura de datos a 7 arrays
                self.stop_serial()

    def save_to_csv(self):
        with open('output.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerows(self.data[:7])  # Guarda solo los primeros 7 arrays de datos
        self.save_button.config(state='disabled')  # Deshabilita el botón después de guardar
        print("Data saved to CSV.")
        self.data = []  # Limpia la lista de datos después de guardar

    def on_closing(self):
        self.running = False
        self.ser.close()
        self.master.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = SerialApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
